// src/store/slices/cartSlice.ts
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { ProductDto } from '../../types/product';

export interface CartItem {
    product: ProductDto;
    quantity: number;
}

interface CartState {
    items: CartItem[];
    totalQuantity: number;
    totalAmount: number;
}

const initialState: CartState = {
    items: [],
    totalQuantity: 0,
    totalAmount: 0,
};

const cartSlice = createSlice({
    name: 'cart',
    initialState,
    reducers: {
        addToCart: (state, action: PayloadAction<{ product: ProductDto; quantity: number }>) => {
            const { product, quantity } = action.payload;
            const existingItem = state.items.find(item => item.product.id === product.id);

            if (existingItem) {
                existingItem.quantity += quantity;
            } else {
                state.items.push({ product, quantity });
                
            }

            state.totalQuantity += quantity;
            state.totalAmount += product.price * quantity;
        },
        removeFromCart: (state, action: PayloadAction<number>) => {
            const productId = action.payload;
            const existingItem = state.items.find(item => item.product.id === productId);

            if (existingItem) {
                state.totalQuantity -= existingItem.quantity;
                state.totalAmount -= existingItem.product.price * existingItem.quantity;
                state.items = state.items.filter(item => item.product.id !== productId);
            }
        },
        updateQuantity: (state, action: PayloadAction<{ productId: number; quantity: number }>) => {
            const { productId, quantity } = action.payload;
            const existingItem = state.items.find(item => item.product.id === productId);

            if (existingItem) {
                state.totalQuantity = state.totalQuantity - existingItem.quantity + quantity;
                state.totalAmount = state.totalAmount - (existingItem.product.price * existingItem.quantity) + (existingItem.product.price * quantity);
                existingItem.quantity = quantity;
            }
        },
        clearCart: (state) => {
            state.items = [];
            state.totalQuantity = 0;
            state.totalAmount = 0;
        },
    },
});

export const { addToCart, removeFromCart, updateQuantity, clearCart } = cartSlice.actions;
export default cartSlice.reducer;